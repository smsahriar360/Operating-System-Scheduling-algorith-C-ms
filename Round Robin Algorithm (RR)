/*==================================================
 Round Robin (RR) Scheduling Algorithm
 @author : S.M SahriAr FaiSal (5B ECSE 224)
 ===================================================*/

#include <iostream> //Input Output Stream. header file used in c++
#include <vector>   //iterators in vector
#include<conio.h>   //Console input and output. header file used in c / c++

/*at = Arrival time,
bt = Burst time,
time_quantum= Quantum time,
tat = Turn around time,
wt = Waiting time*/

using namespace std; // Standard

int main()  //Main Function. Compiler program read start hear.
{
	int i,n,time,remain,temps=0,time_quantum;   //Declare Some Int type variable.

	int wt=0,tat=0; //Declare Int Type variable and initial Primary value 0.

	cout<<"\nEnter the total number of process : "; //Print a message console panel to get the total number of processes maximum of 20 processes.
	cin>>n; //Get input value and set the value in n variable.

	remain=n;   // assigning the number of process to remain variable

    //dynamic array declaration using vector method of (STL)
	//STL standard template library of C++
	vector<int>at(n);
	vector<int>bt(n);
	vector<int>rt(n);

	cout<<"\nEnter the Arrival time, Burst time for All the processes : \n";    //Print a message console panel to get the total number of processes maximum of 20 processes.
	for(i=0;i<n;i++)    //For loop Condition for input all process arrival and bus time. iteration start i = 0, end before i<n, and every iteration incremented i++.
	{
	    cout<<"P["<<i+1<<"]:";  //Print a message console panel that's show Process Number
		cin>>at[i]; //Get input all process arrival time and set the value in at[i] array.
		cin>>bt[i]; //Get input all process bus time and set the value in bt[i] array.
		rt[i]=bt[i];    //pass the value bt[i] to rt[i].
	}

	cout<<"Enter the value of time QUANTUM:"<<endl; //Print a message console panel to get the time QUANTUM.
	cin>>time_quantum;  //Get time_quantum value and put the value in time_quantum variable.

	cout<<"\n\nProcess\t:Turnaround Time:Waiting Time\n\n"; ////Print a message console panel.
	for(time=0,i=0;remain!=0;)  //For loop Condition for remain time. iteration start time= 0, end before i = 0, and every iteration check remain!=0.
	{
		if(rt[i]<=time_quantum && rt[i]>0)  //If condition rt[i] less then equal time quantum and remain time rt[i] greater than 0.
		{
			time += rt[i];  //Addition using shorthand operators. time = time + rt[i].

			rt[i]=0;    //Initial remain time for rt[i] is 0.
			temps=1;    //Initial temps variable temps = 1.
		}

		else if(rt[i]>0)    //else if condition remain time rt[i] greater than 0. then..
		{
			rt[i] -= time_quantum;  //Subtraction using shorthand operators.

			time += time_quantum;   //Addition using shorthand operators.

		}

		if(rt[i]==0 && temps==1)    //if remain time rt[i] equal 0 and temps equal 1 then.
		{
			remain--;   //remain time decrement remain--.

			printf("Process{%d}\t:\t%d\t:\t%d\n",i+1,time-at[i],time-at[i]-bt[i]);  //Desplaying the result of wating, turn around time.
			cout<<endl; //print end line.

			wt += time-at[i]-bt[i]; //total waiting time = waiting time + time - arrival time[i] - burst time[i].
			tat += time-at[i];  //total turn around time = turn around time + time - arrival[i].
			temps=0;    //initial the temps variable value is 0.
		}

		if(i == n-1)    //if i equal n - 1
			i=0;    //then i = 0.
		else if(at[i+1] <= time)    //else if arival time[i+1] less than equal time
			i++;    //then increment i value. i++
		else    //else
			i=0;    //then i = 0.
	}

	cout<<"Average waiting time "<<wt*1.0/n<<endl;  //print a massage with average waiting time in console panel.
	cout<<"Average turn around time "<<tat*1.0/n<<endl; //print a massage with average turnaround time in console panel.

	getch();     //getch() function is holds the output screen until we press any key from the keyboard.
}
